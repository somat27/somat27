name: Update TryHackMe badge

on:
  push:
    paths:
      - README.md
      - .github/workflows/update-thm-badge.yml
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: update-thm-badge
  cancel-in-progress: false

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Obter URL do badge via API (com fallback)
        id: badge
        run: |
          set -euo pipefail

          API_URL="https://tryhackme.com/api/v2/badges/public-profile?userPublicId=5573378"
          FALLBACK_URL="https://tryhackme-badges.s3.amazonaws.com/Somat27.png"

          # Garantir jq
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi

          echo "A consultar: $API_URL"
          # Algumas instâncias do endpoint precisam de Accept: application/json
          if RAW_JSON=$(curl -fsSL -H "Accept: application/json" "$API_URL"); then
            :
          else
            echo "Falhou a leitura da API; a usar fallback." >&2
            echo "url=$FALLBACK_URL" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Extrair o primeiro URL que pareça ser uma imagem .png (preferindo domínios tryhackme)
          URL=$(printf '%s' "$RAW_JSON" \
            | jq -r '
              .. | strings
              | select(test("^https?://"))
              | select(test("\\.(png)(\\?.*)?$"; "i"))
              | select(test("tryhackme-badges|tryhackme\\.com"; "i"))
            ' \
            | head -n1)

          if [ -z "${URL:-}" ] || [ "$URL" = "null" ]; then
            echo "Não foi possível extrair URL do badge; a usar fallback." >&2
            URL="$FALLBACK_URL"
          fi

          echo "URL do badge selecionado: $URL"
          echo "url=$URL" >> "$GITHUB_OUTPUT"

      - name: Ver headers do remoto
        run: |
          curl -sI "${{ steps.badge.outputs.url }}" | sed -n '1,20p'

      - name: Descarregar badge (dinâmico)
        run: |
          curl -fsSL "${{ steps.badge.outputs.url }}" -o thm_badge.png

      - name: Debug – hashes HEAD vs novo
        run: |
          echo "Hash no commit (HEAD):"
          git show HEAD:thm_badge.png | sha256sum || echo "Ainda não existe no HEAD"
          echo "Hash após download:"
          sha256sum thm_badge.png

      - name: Commit se mudou (por hash)
        run: |
          set -e
          git config user.name "Tomás Gonçalves"
          git config user.email "70666298+somat27@users.noreply.github.com"

          # Se não existir no HEAD, comita já
          if ! git cat-file -e HEAD:thm_badge.png 2>/dev/null; then
            git add thm_badge.png
            git commit -m "chore: add THM badge"
            git push
            exit 0
          fi

          # Compara hashes HEAD vs ficheiro descarregado
          HEAD_HASH=$(git show HEAD:thm_badge.png | sha256sum | awk '{print $1}')
          NEW_HASH=$(sha256sum thm_badge.png | awk '{print $1}')

          echo "HEAD  = $HEAD_HASH"
          echo "NOVO  = $NEW_HASH"

          if [ "$HEAD_HASH" != "$NEW_HASH" ]; then
            git add thm_badge.png
            git commit -m "chore: update THM badge"
            git push
          else
            echo "Sem alterações (conteúdo idêntico)"
          fi
