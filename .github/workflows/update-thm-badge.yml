name: Update TryHackMe badge

on:
  push:
    paths:
      - README.md
      - .github/workflows/update-thm-badge.yml
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: update-thm-badge
  cancel-in-progress: false

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Resolver URL dinâmico do badge (com fallback)
        id: badge
        run: |
          set -euo pipefail

          API_URL="https://tryhackme.com/api/v2/badges/public-profile?userPublicId=5573378"
          FALLBACK_URL="https://tryhackme-badges.s3.amazonaws.com/Somat27.png"

          echo "A consultar iframe: $API_URL"
          # Tentar obter HTML do iframe (com algum retry e user-agent decente)
          HTML=$(curl -fsSL --retry 5 --retry-all-errors --compressed \
                 -H "User-Agent: GitHubActions (curl)" \
                 -H "Accept: text/html" "$API_URL" || true)

          # Procurar primeiro URL de imagem .png ou .svg (de preferência em domínios tryhackme)
          IMG_URL=$(printf '%s' "$HTML" \
            | grep -oE 'https?://[^"]+(tryhackme[^"]+)?\.(png|svg)(\?[^"]*)?' \
            | head -n1 || true)

          if [ -z "${IMG_URL:-}" ]; then
            echo "Não encontrei URL no iframe; a usar fallback."
            IMG_URL="$FALLBACK_URL"
          fi

          echo "URL de imagem detetado: $IMG_URL"
          echo "url=$IMG_URL" >> "$GITHUB_OUTPUT"

      - name: Ver headers do remoto
        run: |
          curl -sI "${{ steps.badge.outputs.url }}" | sed -n '1,20p'

      - name: Descarregar badge (dinâmico)
        run: |
          set -euo pipefail
          URL="${{ steps.badge.outputs.url }}"

          # Dependências só se necessário (para svg->png)
          if echo "$URL" | grep -qi '\.svg\(\?|$\)'; then
            sudo apt-get update
            sudo apt-get install -y imagemagick
            TMP_SVG="thm_badge.svg"
            curl -fsSL "$URL" -o "$TMP_SVG"
            # Converter para PNG mantendo nome final igual ao usado no repo
            convert "$TMP_SVG" thm_badge.png
            rm -f "$TMP_SVG"
          else
            curl -fsSL "$URL" -o thm_badge.png
          fi

      - name: Debug – hashes HEAD vs novo
        run: |
          echo "Hash no commit (HEAD):"
          git show HEAD:thm_badge.png | sha256sum || echo "Ainda não existe no HEAD"
          echo "Hash após download:"
          sha256sum thm_badge.png

      - name: Commit se mudou (por hash)
        run: |
          set -e
          git config user.name "Tomás Gonçalves"
          git config user.email "70666298+somat27@users.noreply.github.com"

          # Se não existir no HEAD, comita já
          if ! git cat-file -e HEAD:thm_badge.png 2>/dev/null; then
            git add thm_badge.png
            git commit -m "chore: add THM badge"
            git push
            exit 0
          fi

          # Compara hashes HEAD vs ficheiro descarregado
          HEAD_HASH=$(git show HEAD:thm_badge.png | sha256sum | awk '{print $1}')
          NEW_HASH=$(sha256sum thm_badge.png | awk '{print $1}')

          echo "HEAD  = $HEAD_HASH"
          echo "NOVO  = $NEW_HASH"

          if [ "$HEAD_HASH" != "$NEW_HASH" ]; then
            git add thm_badge.png
            git commit -m "chore: update THM badge (auto)"
            git push
          else
            echo "Sem alterações (conteúdo idêntico)"
          fi
